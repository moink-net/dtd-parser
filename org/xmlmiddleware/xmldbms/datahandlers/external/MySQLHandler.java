// This software is in the public domain.
//
// The software is provided "as is", without warranty of any kind,
// express or implied, including but not limited to the warranties
// of merchantability, fitness for a particular purpose, and
// noninfringement. In no event shall the author(s) be liable for any
// claim, damages, or other liability, whether in an action of
// contract, tort, or otherwise, arising from, out of, or in connection
// with the software or the use or other dealings in the software.
//
// Parts of this software were originally developed in the Database
// and Distributed Systems Group at the Technical University of
// Darmstadt, Germany:
//
//   http://www.informatik.tu-darmstadt.de/DVS1/

// Version 2.0
// Changes from version 1.x: New in version 2.0

package org.xmlmiddleware.xmldbms.datahandlers.external;

import org.xmlmiddleware.xmldbms.*;
import org.xmlmiddleware.xmldbms.datahandlers.*;
import org.xmlmiddleware.xmldbms.maps.*;

import java.sql.*;
import java.util.*;
import javax.sql.*;

/**
 * <p>DataHandler implementation for the MySQL database.</p>
 *
 * <p>Database generated key values are retrieved using the LAST_INSERT
 * value for the connection. This is the value of an AUTO_INCREMENT column
 * during the last INSERT statement executed on this connection.</p>
 *
 * <p>Because of this database generated keys are only supported on tables
 * with an AUTO_INCREMENT column. This is not as limiting as it seems. As
 * of the current version an AUTO_INCREMENT column is the only way to have
 * the database generate a key.</p>
 *
 * <p>Tested with MySQL V3.22</p>
 *
 * @author Sean Walter
 * @version 2.0
 */
public class MySQLHandler
   extends DataHandlerBase
{
   // ************************************************************************
   // Variables
   // ************************************************************************

   // Cache of AUTO_INCREMENT columns found in different tables

   private Hashtable m_usedKeys = null;

   // ************************************************************************
   // Constants
   // ************************************************************************

   // Values used when parsing the 'SHOW COLUMS' statement

   private final static String MYSQL_COL_FIELD = "Field";
   private final static String MYSQL_COL_EXTRA = "Extra";
   private final static String MYSQL_AUTOINCREMENT = "auto_increment";
   private final static String MYSQL_COLUMN_SQL = "SHOW COLUMNS FROM ";

   // ************************************************************************
   // Constructors
   // ************************************************************************

   /**
    * Creates a MySQLHandler
    */
   public MySQLHandler()
   {
      super();
   }

   // ************************************************************************
   // Public methods
   // ************************************************************************

   /**
    * Overrides DataHandlerBase.initialize().
    *
    * @param dataSource The DataSource to get Connections from.
    * @param user The user to connect to the database as. May be null.
    * @param password The password to connect to the database with. May be null.
    * @exception SQLException Thrown if a database error occurs.
    */
   public void initialize(DataSource dataSource, String user, String password)
      throws SQLException
   {
      super.initialize(dataSource, user, password);

      // Hashtable of keys used

      m_usedKeys = new Hashtable();
   }

   /**
    * Inserts a row into the table.
    *
    * <p>This method sets the columns in the row of any primary or unique keys
    * that were generated by the database. It does this via an AUTO_INCREMENT
    * column.</p>
    *
    * @param table Table to insert into.
    * @param row Row to insert.
    * @exception SQLException A database error occurred while inserting data.
    */
   public void insert(Table table, Row row)
      throws SQLException
   {
      checkState();

      PreparedStatement stmt = buildInsert(table, row);
      int numRows = stmt.executeUpdate();

      databaseModified();

      Vector dbGeneratedCols = getDBGeneratedKeyCols(table);

      if(dbGeneratedCols.size() > 0)
      {
         org.gjt.mm.mysql.Statement mysqlStmt =
               (org.gjt.mm.mysql.Statement)getRawStatement(stmt);

         Long lastInsert = new Long(mysqlStmt.getLastInsertID());

         Key key = getAutoIncrementKey(table);

         // If that's the only column to be retrieved...

         Column dbGenColumn = (Column)dbGeneratedCols.elementAt(0);
         Column keyColumn = (Column)key.getColumns().elementAt(0);

         if((dbGeneratedCols.size() == 1) &&
            dbGenColumn.getName().equalsIgnoreCase(keyColumn.getName()))
         {
            // ... then just set that column

            setColumnValue(row, dbGenColumn, lastInsert);
         }
         else
         {
            // Otherwise do a SELECT on the row with that key

            String sql = getDMLGenerator().getSelect(table, key, dbGeneratedCols);
            PreparedStatement selStmt = getConnection().prepareStatement(sql);

            // Put the last insert value in

            Parameters.setParameter(selStmt, 1, keyColumn, lastInsert);

            // Execute it

            ResultSet rs = selStmt.executeQuery();

            if(!rs.next())
               throw new SQLException("[xmldbms] Couldn't retrieve inserted row.");

            // Set them in the row

            for(int i = 0; i < dbGeneratedCols.size(); i++)
            {
               Column column = (Column)dbGeneratedCols.elementAt(i);
               setColumnValue(row, column, rs.getObject(column.getName()));
            }
         }
      }
   }

   // ************************************************************************
   // Protected methods
   // ************************************************************************

   /**
    * Retrieves the AUTO_INCREMENT column for a given table.
    *
    * @param table The table.
    */
   protected Key getAutoIncrementKey(Table table)
      throws SQLException
   {
      if(m_usedKeys.contains(table))
         return (Key)m_usedKeys.get(table);

      // TODO: More efficient way to do this?

      // We create a MySQL statement to get the table definition

      String sql = MYSQL_COLUMN_SQL + getDMLGenerator().getTableName(table) + ";";

      // Execute it

      Statement stmt = getConnection().createStatement();
      ResultSet rs = stmt.executeQuery(sql);

      while(rs.next())
      {
         // NOTE: The assumption is made that MySQL can only have
         // one auto-increment column. This is true in the versions
         // tested (3.22)

         String extra = rs.getString(MYSQL_COL_EXTRA);
         if(extra.equalsIgnoreCase(MYSQL_AUTOINCREMENT))
         {
            // Get the column type for the autoincrement fellow

            Column col = table.getColumn(rs.getString(MYSQL_COL_FIELD));

            // TODO: Should we throw an exception if the column
            // is not found?

            if(col == null) continue;

            // Create the key

            Key key = createColumnKey(col.getName(), col.getType());

            // Cache it

            m_usedKeys.put(table, key);

            // and return it.

            return key;
         }
      }

      // If we got here then there are no auto-increment columns
      // which means we can't really support database generated keys
      // at this point in time.

      throw new SQLException("[xmldbms] Cannot support database generated keys on a MySQL table with no AUTO_INCREMENT field.");
   }
}
