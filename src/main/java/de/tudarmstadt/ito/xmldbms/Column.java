// No copyright, no warranty; use as you will.
// Written by Ronald Bourret, Technical University of Darmstadt, 1998-9

// Version 1.1
// Changes from version 1.0:
// * Changed Column.number to Column.rowObjectIndex.
// * Modified constructor for new name.
// Changes from version 1.01: None

package de.tudarmstadt.ito.xmldbms;

import java.sql.Types;

/**
 * Describes a column; <A HREF="../readme.html#NotForUse">not for
 * general use</A>.
 *
 * <P>Column contains information about a column in a table. The table
 * is not named; instead, Columns are included in Tables and ColumnMaps.
 * </P>
 *
 * <p>Note that column values are stored in three separate objects
 * in XML-DBMS:</p>
 * 
 * <ul>
 * <li><b>Result sets:</b> These are JDBC ResultSet objects either passed
 * to DBMSToDOM or generated by DBMSToDOM when transferring data from the
 * database to XML.</li>
 *
 * <li><b>Row object:</b> This is an intermediate object used by both
 * DBMSToDOM and DOMToDBMS to buffer column values.</li>
 *
 * <li><b>INSERT statement:</b> These are JDBC PreparedStatement objects
 * created by DOMToDBMS when transferring data from XML to the database.</li>
 * </ul>
 *
 * <p>The position of a column value can be different in each of these
 * three objects. For example, it could be in column 5 in the result set,
 * array index 3 in the Row object, and parameter 4 in the INSERT
 * statement. Thus, three sets of column numbers are needed:</p>
 *
 * <ul>
 * <li><b>Result set column number:</b> This is the number of the column in
 * the result set in which the value is stored. The number is 1-based and is
 * stored in the Table.rsColumnNumbers array. (Note that the order in which
 * result set column numbers are stored in this array guarantees that columns
 * in the result set will be accessed in increasing order.)</li>
 *
 * <li><b>Row object column number:</b> This is the index of the position in
 * the Row.columnValues array in which the value is stored. The index is
 * 0-based and is stored in the rowObjectIndex variable of Column. It is
 * also the index of the Table.rsColumnNumbers array; that is, column values
 * are stored in the Row object in the same order they occur in the result
 * set. In XML-DBMS version 1.0, this was named Column.number.</li>
 *
 * <li><b>INSERT statement parameter number:</b> This is the number of the
 * parameter in the INSERT statement in which the column value is stored. The
 * number is 1-based and corresponds to the order in which the Column object is
 * stored in the Table.columns array; it is therefore not stored separately.</li>
 * </ul>
 *
 * <p>In virtually all cases, these three column numbers are the same, except for
 * differences due to being 0- or 1-based. This is because XML-DBMS generates
 * SELECT and INSERT statements itself and therefore places the columns in the
 * same order in each. The only time that they differ is when the calling
 * application passes a result set to DBMSToDOM.retrieveDocument. In this case,
 * the number <i>and</i> order of columns in the result set can differ from the
 * order of the columns as they appear in the Table.columns array. Because of
 * this, the three different numbers are needed.</p>
 *
 * <p>In the future, the Column class should contain information about the
 * nullability and data type of the column as well. This will be used when creating
 * CREATE TABLE statements.</p>
 *
 * @author Ronald Bourret, Technical University of Darmstadt
 * @version 1.1
 */

public class Column
{
   // ********************************************************************
   // Variables
   // ********************************************************************

   /** Name of the column. */
   public String name = null;

   /**
	* Index of the column value in the Rows.columnValues
	* array. 0-based.
	*/

   // 5/29/00, Ronald Bourret
   // Changed the name of the variable from number to rowObjectIndex
   // and changed it from 1-based to 0-based. See comments above.

   public int rowObjectIndex = -1;

   /**
	* Data type of the column. This must be one of the values in
	* java.sql.Types.
	*/
   public int type = Types.NULL;

   /**
	* Length of the column. Used only for character and binary data.
	*/
   public int length = -1;

   // ********************************************************************
   // Constructors
   // ********************************************************************

   public Column()
   {
   }   

   public Column(String name, int rowObjectIndex, int type, int length)
   {
	  // 5/29/00, Ronald Bourret
	  // Modified for renamed variable.

	  this.name = name;
	  this.rowObjectIndex = rowObjectIndex;
	  this.type = type;
	  this.length = length;
   }   
}